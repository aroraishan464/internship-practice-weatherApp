{"version":3,"sources":["redux/temperature/temperatureTypes.js","redux/temperature/temperatureReducer.js","redux/rootReducer.js","redux/store.js","task2 icon.svg","redux/temperature/temperatureActions.js","components/TemperatureContainer.js","App.js","index.js"],"names":["FETCH_TEMPERATURE_REQUEST","FETCH_TEMPERATURE_SUCCESS","FETCH_TEMPERATURE_FAILURE","initialState","loading","temp","error","tempratureReducer","state","action","type","payload","rootReducer","combineReducers","temperature","temperatureReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","fetchTemperature","dispatch","axios","get","process","REACT_APP_CITY_ID","REACT_APP_WEATHER_API_KEY","then","respose","data","main","fetchTemperatureSuccess","catch","errorMsg","message","fetchTemperatureFailure","connect","tempData","useEffect","App","className","src","icon","alt","style","top","left","bottom","right","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAAaA,EAA4B,4BAC5BC,EAA4B,4BAC5BC,EAA4B,4BCInCC,EAAe,CACjBC,SAAS,EACTC,KAAM,GACNC,MAAO,IA0BIC,EAvBW,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCACxD,OAAQA,EAAOC,MACX,KAAKV,EACD,OAAO,2BACAQ,GADP,IAEIJ,SAAS,IAEjB,KAAKH,EACD,MAAO,CACHG,SAAS,EACTC,KAAMI,EAAOE,QACbL,MAAO,IAEf,KAAKJ,EACD,MAAO,CACHE,SAAS,EACTC,KAAM,GACNC,MAAOG,EAAOE,SAEtB,QAAS,OAAOH,ICxBTI,EAJKC,0BAAgB,CAChCC,YAAaC,ICIFC,EAHDC,sBAAYL,EAAaM,8BACrCC,0BAAgBC,OCNH,MAA0B,uC,iBC2B5BC,EAAmB,WAC5B,OAAO,SAACC,GACJA,EArBG,CACHZ,KAAMV,IAqBNuB,IACCC,IADD,4DAC0DC,kKAAYC,kBADtE,+BAC8GD,kKAAYE,4BACzHC,MAAK,SAAAC,GACD,IAAMxB,EAAOwB,EAAQC,KAAKC,KAAK1B,KAC/BiB,EArB0B,SAAAjB,GACnC,MAAO,CACHK,KAAMT,EACNU,QAASN,GAkBK2B,CAAwB3B,OAEpC4B,OAAM,SAAA3B,GACH,IAAM4B,EAAW5B,EAAM6B,QACvBb,EAlB0B,SAAAhB,GACnC,MAAO,CACHI,KAAMR,EACNS,QAASL,GAeK8B,CAAwBF,S,OCT/BG,eAZS,SAAA7B,GACpB,MAAO,CACH8B,SAAU9B,EAAMM,gBAIG,SAAAQ,GACvB,MAAO,CACHD,iBAAkB,kBAAMC,EAASD,SAI1BgB,EAzBc,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,SAAUjB,EAAuB,EAAvBA,iBAItC,OAHAkB,qBAAU,WACNlB,MACD,CAACA,IACGiB,EAASlC,QACZ,4CACAkC,EAAShC,MACT,6BAAKgC,EAAShC,QAEd,+BAAKgC,EAASjC,KAAd,wB,MCQOmC,MAdf,WACE,OACE,cAAC,IAAD,CAAUxB,MAAOA,EAAjB,SACE,sBAAKyB,UAAU,MAAf,UACE,qBAAKC,IAAKC,EAAMF,UAAU,YAAYG,IAAI,OAAOC,MAAO,CAAEC,IAAK,MAAOC,KAAM,SAC5E,cAAC,EAAD,IACA,yCACA,4CACA,qBAAKL,IAAKC,EAAMF,UAAU,YAAYG,IAAI,OAAOC,MAAO,CAAEG,OAAQ,MAAOC,MAAO,eCXxFC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fa3278ff.chunk.js","sourcesContent":["export const FETCH_TEMPERATURE_REQUEST = 'FETCH_TEMPERATURE_REQUEST'\r\nexport const FETCH_TEMPERATURE_SUCCESS = 'FETCH_TEMPERATURE_SUCCESS'\r\nexport const FETCH_TEMPERATURE_FAILURE = 'FETCH_TEMPERATURE_FAILURE'","import {\r\n    FETCH_TEMPERATURE_FAILURE,\r\n    FETCH_TEMPERATURE_REQUEST,\r\n    FETCH_TEMPERATURE_SUCCESS\r\n} from \"./temperatureTypes\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    temp: '',\r\n    error: ''\r\n}\r\n\r\nconst tempratureReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_TEMPERATURE_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case FETCH_TEMPERATURE_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                temp: action.payload,\r\n                error: ''\r\n            }\r\n        case FETCH_TEMPERATURE_FAILURE:\r\n            return {\r\n                loading: false,\r\n                temp: '',\r\n                error: action.payload\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default tempratureReducer;","import { combineReducers } from 'redux'\r\nimport temperatureReducer from './temperature/temperatureReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    temperature: temperatureReducer\r\n})\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './rootReducer'\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(\r\n  applyMiddleware(thunk)\r\n));\r\nexport default store;","export default __webpack_public_path__ + \"static/media/task2 icon.d1e2179e.svg\";","import axios from 'axios'\r\nimport {\r\n    FETCH_TEMPERATURE_REQUEST,\r\n    FETCH_TEMPERATURE_SUCCESS, \r\n    FETCH_TEMPERATURE_FAILURE\r\n} from './temperatureTypes'\r\n\r\nexport const fetchTemperatureRequest = () => {\r\n    return {\r\n        type: FETCH_TEMPERATURE_REQUEST\r\n    }\r\n}\r\n\r\nexport const fetchTemperatureSuccess = temp => {\r\n    return {\r\n        type: FETCH_TEMPERATURE_SUCCESS,\r\n        payload: temp\r\n    }\r\n}\r\n\r\nexport const fetchTemperatureFailure = error => {\r\n    return {\r\n        type: FETCH_TEMPERATURE_FAILURE,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const fetchTemperature = () => {\r\n    return (dispatch) => {\r\n        dispatch(fetchTemperatureRequest())\r\n        axios\r\n        .get(`http://api.openweathermap.org/data/2.5/weather?id=${process.env.REACT_APP_CITY_ID}&units=metric&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\r\n        .then(respose => {\r\n             const temp = respose.data.main.temp\r\n             dispatch(fetchTemperatureSuccess(temp))\r\n         })\r\n         .catch(error => {\r\n             const errorMsg = error.message\r\n             dispatch(fetchTemperatureFailure(errorMsg))\r\n         })\r\n    }\r\n}","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { fetchTemperature } from '../redux/temperature/temperatureActions'\r\n\r\nconst TemperatureContainer = ({ tempData, fetchTemperature }) => {\r\n    useEffect(() => {\r\n        fetchTemperature()\r\n    }, [fetchTemperature])\r\n    return tempData.loading ? (\r\n        <h1>Loading...</h1>\r\n    ) : tempData.error ? (\r\n        <h1>{tempData.error}</h1>\r\n    ) : (\r\n        <h1>{tempData.temp} Degree Celcius</h1>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tempData: state.temperature\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchTemperature: () => dispatch(fetchTemperature())\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TemperatureContainer)\r\n\r\n","import { Provider } from \"react-redux\"\r\nimport store from './redux/store'\r\nimport icon from './task2 icon.svg';\r\nimport TemperatureContainer from \"./components/TemperatureContainer\"\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <img src={icon} className=\"back-icon\" alt=\"icon\" style={{ top: \"5vh\", left: \"3vw\" }} />\r\n        <TemperatureContainer />\r\n        <h1>Updated</h1>\r\n        <h2>third time</h2>\r\n        <img src={icon} className=\"back-icon\" alt=\"icon\" style={{ bottom: \"5vh\", right: \"3vw\" }} />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}